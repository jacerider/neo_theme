{"version":3,"file":"views-admin.js","sources":["../../src/js/views-admin.ts"],"sourcesContent":["/**\n * @file\n * Overrides vertical tabs theming to enable Neo designs.\n */\n\n(($, Drupal) => {\n\n  /**\n   * The input field items that add displays must be rendered as `<input>`\n   * elements. The following behavior detaches the `<input>` elements from the\n   * DOM, wraps them in an unordered list, then appends them to the list of\n   * tabs.\n   *\n   * @type {Drupal~behavior}\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Fixes the input elements needed.\n   */\n  Drupal.behaviors.viewsUiRenderAddViewButton.attach = function (context:HTMLElement) {\n    // Build the add display menu and pull the display input buttons into it.\n    const menu = once(\n      'views-ui-render-add-view-button',\n      '#views-display-menu-tabs',\n      context,\n    );\n    if (!menu.length) {\n      return;\n    }\n    const $menu = $(menu);\n\n    const $addDisplayDropdown = $(\n      `<li class=\"add\"><a href=\"#\"><span class=\"icon add\"></span>${Drupal.t(\n        'Add',\n      )}</a><ul class=\"action-list\" style=\"display:none;\"></ul></li>`,\n    );\n    const $displayButtons = $menu.nextAll('input.add-display, button.add-display').detach();\n    $displayButtons\n      .appendTo($addDisplayDropdown.find('.action-list'))\n      .wrap('<li>')\n      .parent()\n      .eq(0)\n      .addClass('first')\n      .end()\n      .eq(-1)\n      .addClass('last');\n    $displayButtons.each(function () {\n      const $this = $(this);\n      $this.attr('value', String($this.attr('data-drupal-dropdown-label')));\n    });\n    $addDisplayDropdown.appendTo($menu);\n\n    // Add the click handler for the add display button.\n    $menu.find('li.add > a').on('click', function (event) {\n      event.preventDefault();\n      const $trigger = $(this);\n      console.log($trigger);\n      Drupal.behaviors.viewsUiRenderAddViewButton.toggleMenu($trigger);\n    });\n    // Add a mouseleave handler to close the dropdown when the user mouses\n    // away from the item. We use mouseleave instead of mouseout because\n    // the user is going to trigger mouseout when moving away from the trigger\n    // link to the sub menu items.\n    // We use the live binder because the open class on this item will be\n    // toggled on and off and we want the handler to take effect in the cases\n    // that the class is present, but not when it isn't.\n    $('li.add', $menu).on('mouseleave', function () {\n      const $this = $(this);\n      const $trigger = $this.children('a[href=\"#\"]');\n      if (Drupal.elementIsVisible($this.children('.action-list')[0])) {\n        Drupal.behaviors.viewsUiRenderAddViewButton.toggleMenu($trigger);\n      }\n    });\n  };\n\n})(jQuery, Drupal);\n\nexport { };\n"],"names":["$","Drupal","context","menu","$menu","$addDisplayDropdown","$displayButtons","$this","event","$trigger"],"mappings":"CAKC,CAACA,GAAGC,MAAW;AAadA,EAAAA,EAAO,UAAU,2BAA2B,SAAS,SAAUC,GAAqB;AAElF,UAAMC,IAAO;AAAA,MACX;AAAA,MACA;AAAA,MACAD;AAAA,IAAA;AAEE,QAAA,CAACC,EAAK;AACR;AAEI,UAAAC,IAAQJ,EAAEG,CAAI,GAEdE,IAAsBL;AAAA,MAC1B,6DAA6DC,EAAO;AAAA,QAClE;AAAA,MACD,CAAA;AAAA,IAAA,GAEGK,IAAkBF,EAAM,QAAQ,uCAAuC,EAAE,OAAO;AAEnF,IAAAE,EAAA,SAASD,EAAoB,KAAK,cAAc,CAAC,EACjD,KAAK,MAAM,EACX,SACA,GAAG,CAAC,EACJ,SAAS,OAAO,EAChB,MACA,GAAG,EAAE,EACL,SAAS,MAAM,GAClBC,EAAgB,KAAK,WAAY;AACzB,YAAAC,IAAQP,EAAE,IAAI;AACpB,MAAAO,EAAM,KAAK,SAAS,OAAOA,EAAM,KAAK,4BAA4B,CAAC,CAAC;AAAA,IAAA,CACrE,GACDF,EAAoB,SAASD,CAAK,GAGlCA,EAAM,KAAK,YAAY,EAAE,GAAG,SAAS,SAAUI,GAAO;AACpD,MAAAA,EAAM,eAAe;AACf,YAAAC,IAAWT,EAAE,IAAI;AACvB,cAAQ,IAAIS,CAAQ,GACpBR,EAAO,UAAU,2BAA2B,WAAWQ,CAAQ;AAAA,IAAA,CAChE,GAQDT,EAAE,UAAUI,CAAK,EAAE,GAAG,cAAc,WAAY;AACxC,YAAAG,IAAQP,EAAE,IAAI,GACdS,IAAWF,EAAM,SAAS,aAAa;AACzCN,MAAAA,EAAO,iBAAiBM,EAAM,SAAS,cAAc,EAAE,CAAC,CAAC,KAC3DN,EAAO,UAAU,2BAA2B,WAAWQ,CAAQ;AAAA,IACjE,CACD;AAAA,EAAA;AAGL,GAAG,QAAQ,MAAM;"}